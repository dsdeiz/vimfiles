snippet hook_nodeapi "hook_nodeapi"

/**
 * Implementation of hook_nodeapi().
 */
function `!v Filename()`_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  switch ($op) {
    case "alter":
      ${1:// Your code here.}
      break;
    case "delete":
      break;
    case "delete revision":
      break;
    case "insert":
      break;
    case "load":
      break;
    case "prepare":
      break;
    case "prepare translation":
      break;
    case "print":
      break;
    case "rss item":
      break;
    case "search result":
      break;
    case "presave":
      break;
    case "update":
      break;
    case "update index":
      break;
    case "validate":
      break;
    case "view":
      break;
  }
}


endsnippet

snippet hook_comment "hook_comment"

/**
 * Implementation of hook_comment().
 */
function `!v Filename()`_comment(&$a1, $op) {
  switch ($op) {
    case "insert":
      ${1:// Your code here}
      break;
    case "update":
      break;
    case "view":
      break;
    case "validate":
      break;
    case "publish":
      break;
    case "unpublish":
      break;
    case "delete":
      break;
  }
}


endsnippet

snippet drupal_goto "drupal_goto"
drupal_goto('${1:path}', '${2:query}', '${3:anchor}', '${4:http_response_code}');
endsnippet

snippet hook_node_operations "hook_node_operations"

/**
 * Implementation of hook_node_operations().
 */
function `!v Filename()`_node_operations() {
  $operations = array(
    '${1:/* operation */}' => array(
      'label' => t('${2:/* label */}'),
      'callback' => '${3:/* callback */}',
    ),
  );
  return $operations;
}

/**
 * Callback function
 */
function $3 {
  ${4:// Your code here.}
}


endsnippet

snippet hook_user "hook_user"

/**
 * Implementation of hook_user().
 */
function `!v Filename()`_user($op, &$edit, &$account, $category = NULL) {
  switch ($op) {
    case "after_update":
      ${1:// Your code here.}
      break;
    case "categories":
      break;
    case "delete":
      break;
    case "form":
      break;
    case "insert":
      break;
    case "load":
      break;
    case "login":
      break;
    case "logout":
      break;
    case "register":
      break;
    case "submit":
      break;
    case "update":
      break;
    case "validate":
      break;
    case "view":
      break;
  }
}


endsnippet

snippet hook_help "hook_help"

/**
 * Implementation of hook_help.
 */
function `!v Filename()`_help($path, $arg) {
  switch ($path) {
    case '${1:/* path */}':
      // Enter your help text below
      return t('${2:/* text */}');
  }
}


endsnippet

snippet drupal_get_form "drupal_get_form"
drupal_get_form('${1:/* Form ID */}', $${2:argument});

endsnippet

snippet hook_user_operations "hook_user_operations"

/**
 * Implementation of hook_user_operations().
 */

function `!v Filename()`_user_operations() {
  $operations = array(
    '${1:/* operation */}' => array(
      'label' => t('${2:/* label */}'),
      'callback' => '${3:/* callback */}',
    ),
  );
  return $operations;
}

/**
 * Callback function
 */
function $3 {
  ${4:// Your code here.}
}


endsnippet

snippet drupal_add_css "drupal_add_css"
drupal_add_css(${1:/* path */}, '${2:/* Type (optional) 'module' or 'theme' */}', '${3:/* Media (optional) e.g. 'all', 'print', or 'screen' */}', ${4:/* preprocess TRUE of FALSE */});

endsnippet

snippet hook_schema "hook_schema"

/**
 * Implementation of hook_schema().
 */
function `!v Filename()`_schema() {
  $schema['${1:table}'] = array(
    'description' => '${2}',
    'fields' => array(
      '${3:column}' => array(
        'description' => '${4}',
        'type' => '${5}',
        'unsigned' => ${6},
        'not null' => ${7},
      ),
    ),
    'indexes' => array(
      ${8}
    ),
    'unique keys' => array(
      ${9}
    ),
    'primary key' => array(${10}),
  );
  return $schema
}


endsnippet

snippet textarea "textarea"
$form['${1:/* form element */}'] = array(
  '#type' => 'textarea',
  '#title' => t('${2:/* title */}'),
  '#rows' => ${3:/* default:5 */},
);

endsnippet

snippet textfield "textfield"
$form['${1:/* form element */}'] = array(
  '#type' => 'textfield',
  '#title' => t('${2:/* title */}'),
  '#size' => ${3:/* default:60 */},
);

endsnippet

snippet db_query "db_query"
$result = db_query('${1:/* Query */}', ${2:/* Arguments */});

endsnippet

snippet hook_node_type "hook_node_type"

/**
 * Implementation of hook_node_type().
 */
function `!v Filename()`_node_type($op, $info) {
  switch ($op) {
    case "delete":
      ${1:// Your code here.}
      break;
    case "insert":
      break;
    case "update":
      break;
  }
}


endsnippet

snippet file "file"
$form['${1:/* form element */}'] = array(
  '#type' => 'file',
  '#title' => t('${2:/* title */}'),
  '#description' => t('${3:/* description */}'),
);

endsnippet

snippet submit "submit"
$form['${1:/* form element */}'] = array(
  '#type' => 'submit',
  '#value' => t('${2:/* value */}'),
);

endsnippet

snippet drupal_add_js "drupal_add_js"
drupal_add_js(${1:/* Data */}, '${2:/* Type 'core', 'module', 'theme', 'inline' and 'setting' */}', '${3:/* Scope: header or footer */}', ${4:/* Defer TRUE of FALSE */}, ${5:/* Cache TRUE or FALSE*/}, ${6: /* Preprocess TRUE or FALSE */});

endsnippet

snippet hook_node_info "hook_node_info"

/**
 * Implementation of hook_node_info().
 */
function `!v Filename()`_node_info() {
  return array(
    '${1:/* machine-readable name */}' => array(
      'name' => t('${2:/* human-readable name */}'),
      'module' => '`!v Filename()`',
      'description' => t('${3:/* description */}'),
    ),
  );
}



endsnippet

snippet hook_requirements "hook_requirements"
/*
 * Implementation of hook_requirements().
 * @param string $phase
 *  The phase in which hook_requirements is run:
 *    'install': the module is being installed.
 *    'runtime': the runtime requirements are being checked and shown on the status report page.
 * @return
 *   A keyed array of requirements. Each requirement is itself an array with the following items:
 *     'title': the name of the requirement.
 *     'value': the current value (e.g. version, time, level, ...).
 *       During install phase, this should only be used for version numbers, do not set it if not applicable.
 *     'description': description of the requirement/status.
 *     'severity': the requirement's result/severity level, one of:
 *       REQUIREMENT_INFO: For info only.
 *       REQUIREMENT_OK: The requirement is satisfied.
 *       REQUIREMENT_WARNING: The requirement failed with a warning.
 *       REQUIREMENT_ERROR: The requirement failed with an error.
 *
 */
function `!v Filename()`_requirements($phase) {
  $requirements = array();

  ${1:// Your code here.}

  return $requirements;
}


endsnippet

snippet hook_update_N "hook_update_N"
/*
 * Implementation of hook_update_N().
 * @see http://api.drupal.org/api/drupal/developer--hooks--install.php/function/hook_update_N/6
 * @return array $ret
 *  An array with the results of the calls to update_sql().
 */
function `!v Filename()`_update_N(&$sandbox) {
  $ret = array();

  ${1:// Your code here.}

  return $ret;
}

endsnippet

snippet hook_cron "hook_cron"

/**
 * Implementation of hook_cron().
 */
function `!v Filename()`_cron() {
  ${1:// Your code here.}
}


endsnippet

snippet drupal_get_path "drupal_get_path"
drupal_get_path('${1:/* Type: module, theme or theme_engine */}', '${2:/* Name */}');

endsnippet

snippet hook_mail_alter "hook_mail_alter"

/**
 * Implementation of hook_mail_alter().
 */
function `!v Filename()`_mail_alter(&$message) {
  ${1:// Your code here.}
}


endsnippet

snippet hook_form_alter "hook_form_alter"

/**
 * Implementation of hook_form_alter().
 */
function `!v Filename()`_form_alter(&$form, $form_state, $form_id) {
  ${1:// your code.}
}


endsnippet

snippet hook_menu_alter "hook_menu_alter"

/**
 * Implementation of hook_menu_alter().
 */
function `!v Filename()`_menu_alter(&$${1:items}) {
  $$1['${2:/* your code here */}']
}


endsnippet

snippet hook_init "hook_init"
/**
 * Implementation of hook_init().
 */
function `!v Filename()`_init() {
  ${1:/* your code here */}
}

endsnippet

snippet hook_views_api "hook_views_api"

/**
 * Implementation of hook_views_api().
 */
function `!v Filename()`_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', '`!v Filename()`') . '/views',
  );
}


endsnippet

snippet select "select"
$form['${1:/* form element */}'] = array(
  '#type' => 'select',
  '#title' => t('${2:/* title */}'),
  '#description' => t('${3:/* description */}'),
  '#options' => array(
    '${4:/* key */}' => t('${5:/* value */}'),
  ),
);

endsnippet

snippet watchdog "watchdog"
watchdog('${1:/* type */}', '${2:/* message */}'${3});

endsnippet

snippet markup "markup"
$form['${1:/* form element */}'] = array(
  '#value' => '${2:/* markup */}',
);

endsnippet

snippet db_fetch_object "db_fetch_object"
while ($${1:row} = db_fetch_object($result)) {
  ${2:// Your code here}
}
endsnippet

snippet t "t"
t('${1:/* Your text */}', array(${1:/* arguments */}))
endsnippet

snippet drupal_get_path_alias "drupal_get_path_alias"
drupal_get_path_alias('node/${1:nid}', ${2:language (optional)});
endsnippet

snippet hook_menu "hook_menu"
/**
 * Implementation of hook_menu()..
 */
function `!v Filename()`_menu() {
  $${1:items} = array();

  $$1['${2:path}'] = array(
    'title' => '${3:title}',
    'page callback' => '${4:page_callback}',
    'access arguments' => array('${5:permission}'),
    'type' => ${6:MENU_CALLBACK},
  );

  return $$1;
}


endsnippet

snippet l "l"
l(${1:/* text */}, ${2:/* link */})

endsnippet

snippet hook_block "hook_block"

/**
 * Implementation of hook_block().
 */
function `!v Filename()`_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list':
      ${1}
      break;
    case 'configure':
      break;
    case 'save':
      break;
    case 'view':
      break;
  }
}


endsnippet

snippet db_fetch_array "db_fetch_array"
while ($${1:row} = db_fetch_array($result)) {
  ${2:// Your code here}
}
endsnippet

snippet url "url"
url('${1:path}', array('query' => '${2:query}', 'absolute' => ${3:false}))

endsnippet

snippet dsm "dsm"
drupal_set_message('${1:message}.', '${2:status, warning, or error}', ${3:repeat (default:TRUE)});

endsnippet

snippet hook_perm "hook_perm"

/**
 * Implementation of hook_perm().
 */
function `!v Filename()`_perm() {
  return array('${1:/* permission */}');
}


endsnippet

snippet hook_theme "hook_theme"

/**
 * Implementation of hook_theme().
 */
function `!v Filename()`_theme($existing, $type, $theme, $path) {
  return array(
    '${1:theme_function}' => array(
      'arguments' => array(${2:/* Theme function arguments */}),
      ${3:/* See for options */}
    ),
  );
}


endsnippet

snippet checkboxes "checkboxes"
$form['${1:/* form element */}'] = array(
  '#type' => 'checkboxes',
  '#title' => t('${2:/* title */}'),
  '#description' => t('${3:/* description */}'),
  '#options' => array(
    '${4:/* key */}' => t('${5:/* value */}'),
  );
);

endsnippet

snippet hook_taxonomy "hook_taxonomy"

/**
 * Implementation of hook_taxonomy().
 */
function `!v Filename()`_taxonomy($op, $type, $array = NULL) {
  switch ($op) {
    case "delete":
      ${1:// Your code here.}
      break;
    case "insert":
      break;
    case "update":
      break;
  }
}


endsnippet

snippet db_rewrite_sql "db_rewrite_sql"
$result = db_query(db_rewrite_sql('${1:/* Query */}'), ${2:/* Arguments */});

endsnippet

snippet hook_views_query_alter "hook_views_query_alter"

/**
 * Implementation of hook_views_query_alter().
 */
function `!v Filename()`_views_query_alter(&$view, &$query) {
  ${2:// Your code here.}
}


endsnippet

snippet checkbox "checkbox"
$form['${1:/* form element */}'] = array(
  '#type' => 'checkbox',
  '#title' => t('${2:/* title */}'),
  '#description' => t('${3:/* description */}'),
);

endsnippet

